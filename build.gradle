import com.bmuschko.gradle.docker.tasks.image.*

import java.util.regex.Matcher

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'com.bmuschko.docker-remote-api' version '4.8.0'
    id 'net.researchgate.release' version '2.6.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.3.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: '2.1.3.RELEASE'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

docker {

    registryCredentials {
        url = 'https://cloud.docker.com/repository/docker/devnxt/bob'
        username = 'devnxt'
        password = file('foobar.config').text
        email = 'my007id@gmail.com'
    }
}

task copyFiles(type: Copy) {
    dependsOn bootJar
    from(tasks.bootJar.outputs.files.singleFile)
    into("build/docker")
}

task createDockerfile(type: Dockerfile) {
    dependsOn copyFiles

    from('openjdk:jre-alpine')
    copyFile('bob-' + version + '.jar', '/app/bob' + version + '.jar')
    entryPoint('java')
    defaultCommand('-jar', '/app/bob' + version + '.jar')
    exposePort(8080)
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile

    tags.add('devnxt/bob:' + project.version)
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage

    imageName = 'devnxt/bob'
    tag = project.version
}

task deleteImage(type: DockerRemoveImage) {
    shouldRunAfter pushImage

    force = true
    imageId = 'devnxt/bob:' + project.version
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[Gradle Release Plugin] - preparing to release'
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']
    versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]

    scmAdapters = [
            net.researchgate.release.GitAdapter,
            net.researchgate.release.SvnAdapter,
            net.researchgate.release.HgAdapter,
            net.researchgate.release.BzrAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}

afterReleaseBuild.dependsOn pushImage